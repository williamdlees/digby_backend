# generated by datamodel-codegen:
#   filename:  vdjbase-api-openapi3.yaml
#   timestamp: 2024-07-10T10:52:55+00:00

from __future__ import annotations

from datetime import date, datetime
from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field


class Ontology(BaseModel):
    id: Optional[str] = Field(
        None, description='CURIE of the concept, encoding the ontology and the local ID'
    )
    label: Optional[str] = Field(
        None, description='Label of the concept in the respective ontology'
    )


class Dataset(BaseModel):
    dataset: Optional[str] = None
    locus: Optional[str] = None
    type: Optional[str] = None


class DatasetsResponse(BaseModel):
    datasets: Optional[List[Dataset]] = None


class SubjectDataset(BaseModel):
    id: Optional[str] = None
    study_name: Optional[str] = None
    subject_identifier: Optional[str] = None
    sample_identifier: Optional[str] = None
    dataset: Optional[str] = None


class SubjectDatasetResponse(BaseModel):
    subject_datasets: Optional[List[SubjectDataset]] = None


class Locus(Enum):
    IGH = 'IGH'
    IGI = 'IGI'
    IGK = 'IGK'
    IGL = 'IGL'
    TRA = 'TRA'
    TRB = 'TRB'
    TRD = 'TRD'
    TRG = 'TRG'


class InferenceProcessEnum(Enum):
    genomic_sequencing = 'genomic_sequencing'
    repertoire_sequencing = 'repertoire_sequencing'


class InferenceProcess(BaseModel):
    root: Optional[InferenceProcessEnum] = Field(
        None,
        description='Information on how the genotype was acquired. Controlled vocabulary.',
        example='repertoire_sequencing',
        title='Genotype acquisition process',
    )


class DeletedGene(BaseModel):
    label: str = Field(
        ..., description='The accepted name for this gene, taken from the GermlineSet'
    )
    germline_set_ref: str = Field(
        ..., description='GermlineSet from which it was taken (issuer/name/version)'
    )
    phasing: Optional[int] = Field(
        None,
        description='Chromosomal phasing indicator. Alleles with the same value are inferred to be located on the  same chromosome.\n',
    )


class DocumentedAllele(BaseModel):
    label: str = Field(
        ..., description='The accepted name for this allele, taken from the GermlineSet'
    )
    germline_set_ref: str = Field(
        ...,
        description='GermlineSet from which it was taken, referenced in standardized form (Repo:Label:Version)',
        example='OGRDB:Human_IGH:2021.11',
    )
    phasing: Optional[int] = Field(
        None,
        description='Chromosomal phasing indicator. Alleles with the same value are inferred to be located on the  same chromosome.\n',
    )


class UndocumentedAllele(BaseModel):
    allele_name: str = Field(
        ..., description='Allele name as allocated by the inference pipeline'
    )
    sequence: str = Field(
        ...,
        description='nt sequence of the allele, as provided by the inference pipeline',
    )
    phasing: Optional[int] = Field(
        None,
        description='Chromosomal phasing indicator. Alleles with the same value are inferred to be located on the  same chromosome.\n',
    )


class DataProcessing(BaseModel):
    data_processing_id: Optional[str] = Field(
        None,
        description='Identifier for the data processing object.',
        title='Data processing ID',
    )
    primary_annotation: Optional[bool] = Field(
        False,
        description='If true, indicates this is the primary or default data processing for the repertoire and its rearrangements. If false, indicates this is a secondary or additional data processing.\n',
        title='Primary annotation',
    )
    software_versions: str = Field(
        ...,
        description='Version number and / or date, include company pipelines',
        example='IgBLAST 1.6',
        title='Software tools and version numbers',
    )
    paired_reads_assembly: str = Field(
        ...,
        description='How paired end reads were assembled into a single receptor sequence',
        example='PandaSeq (minimal overlap 50, threshold 0.8)',
        title='Paired read assembly',
    )
    quality_thresholds: str = Field(
        ...,
        description='How/if sequences were removed from (4) based on base quality scores',
        example='Average Phred score >=20',
        title='Quality thresholds',
    )
    primer_match_cutoffs: str = Field(
        ...,
        description='How primers were identified in the sequences, were they removed/masked/etc?',
        example='Hamming distance <= 2',
        title='Primer match cutoffs',
    )
    collapsing_method: str = Field(
        ...,
        description='The method used for combining multiple sequences from (4) into a single sequence in (5)',
        example='MUSCLE 3.8.31',
        title='Collapsing method',
    )
    data_processing_protocols: str = Field(
        ...,
        description='General description of how QC is performed',
        example='Data was processed using [...]',
        title='Data processing protocols',
    )
    data_processing_files: Optional[List[str]] = Field(
        None,
        description='Array of file names for data produced by this data processing.',
        example=['ERR1278153_aa.txz', 'ERR1278153_ab.txz', 'ERR1278153_ac.txz'],
        title='Processed data file names',
    )
    germline_database: str = Field(
        ...,
        description='Source of germline V(D)J genes with version number or date accessed.',
        example='ENSEMBL, Homo sapiens build 90, 2017-10-01',
        title='V(D)J germline reference database',
    )
    germline_set_ref: Optional[str] = Field(
        None,
        description='Unique identifier of the germline set and version, in standardized form (Repo:Label:Version)',
        example='OGRDB:Human_IGH:2021.11',
    )
    analysis_provenance_id: Optional[str] = Field(
        None,
        description='Identifier for machine-readable PROV model of analysis provenance',
        title='Analysis provenance ID',
    )


class KeywordsStudyEnum(Enum):
    contains_ig = 'contains_ig'
    contains_tr = 'contains_tr'
    contains_paired_chain = 'contains_paired_chain'
    contains_schema_rearrangement = 'contains_schema_rearrangement'
    contains_schema_clone = 'contains_schema_clone'
    contains_schema_cell = 'contains_schema_cell'
    contains_schema_receptor = 'contains_schema_receptor'


class SexEnum(Enum):
    male = 'male'
    female = 'female'
    pooled = 'pooled'
    hermaphrodite = 'hermaphrodite'
    intersex = 'intersex'


class Sex(BaseModel):
    root: Optional[SexEnum] = Field(
        None, description='Biological sex of subject', example='female', title='Sex'
    )


class TemplateClass(Enum):
    DNA = 'DNA'
    RNA = 'RNA'


class LibraryGenerationMethod(Enum):
    PCR = 'PCR'
    RT_RHP__PCR = 'RT(RHP)+PCR'
    RT_oligo_dT__PCR = 'RT(oligo-dT)+PCR'
    RT_oligo_dT__TS_PCR = 'RT(oligo-dT)+TS+PCR'
    RT_oligo_dT__TS_UMI__PCR = 'RT(oligo-dT)+TS(UMI)+PCR'
    RT_specific__PCR = 'RT(specific)+PCR'
    RT_specific__TS_PCR = 'RT(specific)+TS+PCR'
    RT_specific__TS_UMI__PCR = 'RT(specific)+TS(UMI)+PCR'
    RT_specific_UMI__PCR = 'RT(specific+UMI)+PCR'
    RT_specific_UMI__TS_PCR = 'RT(specific+UMI)+TS+PCR'
    RT_specific__TS = 'RT(specific)+TS'
    other = 'other'


class CompleteSequences(Enum):
    partial = 'partial'
    complete = 'complete'
    complete_untemplated = 'complete+untemplated'
    mixed = 'mixed'


class PhysicalLinkage(Enum):
    none = 'none'
    hetero_head_head = 'hetero_head-head'
    hetero_tail_head = 'hetero_tail-head'
    hetero_prelinked = 'hetero_prelinked'


class Sample(BaseModel):
    sample_id: str = Field(
        ...,
        description='Sample ID assigned by submitter, unique within study. If possible, a persistent sample ID linked to INSDC or similar repository study should be used.\n',
        example='SUP52415',
        title='Biological sample ID',
    )
    sample_type: str = Field(
        ...,
        description='The way the sample was obtained, e.g. fine-needle aspirate, organ harvest, peripheral venous puncture',
        example='Biopsy',
        title='Sample type',
    )
    tissue: Ontology = Field(
        ...,
        description='The actual tissue sampled, e.g. lymph node, liver, peripheral blood',
        example={'id': 'UBERON:0002371', 'label': 'bone marrow'},
        title='Tissue',
    )
    anatomic_site: str = Field(
        ...,
        description='The anatomic location of the tissue, e.g. Inguinal, femur',
        example='Iliac crest',
        title='Anatomic site',
    )
    disease_state_sample: str = Field(
        ...,
        description='Histopathologic evaluation of the sample',
        example='Tumor infiltration',
        title='Disease state of sample',
    )
    collection_time_point_relative: float = Field(
        ...,
        description='Time point at which sample was taken, relative to `Collection time event`',
        example=14,
        title='Sample collection time',
    )
    collection_time_point_relative_unit: Ontology = Field(
        ...,
        description='Unit of Sample collection time',
        example={'id': 'UO:0000033', 'label': 'day'},
        title='Sample collection time unit',
    )
    collection_time_point_reference: str = Field(
        ...,
        description='Event in the study schedule to which `Sample collection time` relates to',
        example='Primary vaccination',
        title='Collection time event',
    )
    biomaterial_provider: str = Field(
        ...,
        description='Name and address of the entity providing the sample',
        example='Tissues-R-Us, Tampa, FL, USA',
        title='Biomaterial provider',
    )


class PcrTargetLocusEnum(Enum):
    IGH = 'IGH'
    IGI = 'IGI'
    IGK = 'IGK'
    IGL = 'IGL'
    TRA = 'TRA'
    TRB = 'TRB'
    TRD = 'TRD'
    TRG = 'TRG'


class PcrTargetLocus(BaseModel):
    root: Optional[PcrTargetLocusEnum] = Field(
        None,
        description='Designation of the target locus. Note that this field uses a controlled vocubulary that is meant to provide a generic classification of the locus, not necessarily the correct designation according to a specific nomenclature.\n',
        example='IGK',
        title='Target locus for PCR',
    )


class PCRTarget(BaseModel):
    pcr_target_locus: PcrTargetLocus = Field(
        ...,
        description='Designation of the target locus. Note that this field uses a controlled vocubulary that is meant to provide a generic classification of the locus, not necessarily the correct designation according to a specific nomenclature.\n',
        example='IGK',
        title='Target locus for PCR',
    )
    forward_pcr_primer_target_location: str = Field(
        ...,
        description='Position of the most distal nucleotide templated by the forward primer or primer mix',
        example='IGHV, +23',
        title='Forward PCR primer target location',
    )
    reverse_pcr_primer_target_location: str = Field(
        ...,
        description='Position of the most proximal nucleotide templated by the reverse primer or primer mix',
        example='IGHG, +57',
        title='Reverse PCR primer target location',
    )


class FileTypeEnum(Enum):
    fasta = 'fasta'
    fastq = 'fastq'


class FileType(BaseModel):
    root: Optional[FileTypeEnum] = Field(
        None,
        description='File format for the raw reads or sequences',
        title='Raw sequencing data file type',
    )


class ReadDirectionEnum(Enum):
    forward = 'forward'
    reverse = 'reverse'
    mixed = 'mixed'


class ReadDirection(BaseModel):
    root: Optional[ReadDirectionEnum] = Field(
        None,
        description='Read direction for the raw reads or sequences. The first file in paired-read sequencing.',
        example='forward',
        title='Read direction',
    )


class PairedReadDirectionEnum(Enum):
    forward = 'forward'
    reverse = 'reverse'
    mixed = 'mixed'


class PairedReadDirection(BaseModel):
    root: Optional[PairedReadDirectionEnum] = Field(
        None,
        description='Read direction for the second file in paired-read sequencing',
        example='reverse',
        title='Paired read direction',
    )


class SequencingData(BaseModel):
    sequencing_data_id: str = Field(
        ...,
        description='Persistent identifier of raw data stored in an archive (e.g. INSDC run ID). Data archive should  be identified in the CURIE prefix.\n',
        example='SRA:SRR11610494',
        title='Raw sequencing data persistent identifier',
    )
    file_type: FileType = Field(
        ...,
        description='File format for the raw reads or sequences',
        title='Raw sequencing data file type',
    )
    filename: str = Field(
        ...,
        description='File name for the raw reads or sequences. The first file in paired-read sequencing.',
        example='MS10R-NMonson-C7JR9_S1_R1_001.fastq',
        title='Raw sequencing data file name',
    )
    read_direction: ReadDirection = Field(
        ...,
        description='Read direction for the raw reads or sequences. The first file in paired-read sequencing.',
        example='forward',
        title='Read direction',
    )
    read_length: int = Field(
        ...,
        description='Read length in bases for the first file in paired-read sequencing',
        example=300,
        title='Forward read length',
    )
    paired_filename: str = Field(
        ...,
        description='File name for the second file in paired-read sequencing',
        example='MS10R-NMonson-C7JR9_S1_R2_001.fastq',
        title='Paired raw sequencing data file name',
    )
    paired_read_direction: PairedReadDirection = Field(
        ...,
        description='Read direction for the second file in paired-read sequencing',
        example='reverse',
        title='Paired read direction',
    )
    paired_read_length: int = Field(
        ...,
        description='Read length in bases for the second file in paired-read sequencing',
        example=300,
        title='Paired read length',
    )
    index_filename: Optional[str] = Field(
        None,
        description='File name for the index file',
        example='MS10R-NMonson-C7JR9_S1_R3_001.fastq',
        title='Sequencing index file name',
    )
    index_length: Optional[int] = Field(
        None,
        description='Read length in bases for the index file',
        example=8,
        title='Index read length',
    )


class InferenceProcess1Enum(Enum):
    genomic_sequencing = 'genomic_sequencing'
    repertoire_sequencing = 'repertoire_sequencing'


class InferenceProcess1(BaseModel):
    root: Optional[InferenceProcess1Enum] = Field(
        None,
        description='Information on how the genotype was acquired. Controlled vocabulary.',
        example='repertoire_sequencing',
        title='Genotype acquisition process',
    )


class MhcClass(Enum):
    MHC_I = 'MHC-I'
    MHC_II = 'MHC-II'
    MHC_nonclassical = 'MHC-nonclassical'


class MHCAllele(BaseModel):
    allele_designation: Optional[str] = Field(
        None,
        description='The accepted designation of an allele, usually its gene symbol plus allele/sub-allele/etc identifiers, if provided by the mhc_typing method\n',
    )
    gene: Optional[Ontology] = Field(
        None,
        description='The MHC gene to which the described allele belongs',
        example={'id': 'MRO:0000046', 'label': 'HLA-A'},
        title='MHC gene',
    )
    reference_set_ref: Optional[str] = Field(
        None,
        description='Repository and list from which it was taken (issuer/name/version)',
    )


class ErrorResponse(BaseModel):
    message: Optional[str] = Field(None, description='Detail about the error')


class SpeciesResponse(BaseModel):
    species: Optional[List[Ontology]] = None


class Genotype(BaseModel):
    receptor_genotype_id: str = Field(
        ...,
        description='A unique identifier within the file for this Receptor Genotype, typically generated by the  repository hosting the schema, for example from the underlying ID of the database record.\n',
    )
    locus: Locus = Field(..., description='Gene locus', example='IGH')
    documented_alleles: Optional[List[DocumentedAllele]] = Field(
        None, description='List of alleles documented in reference set(s)'
    )
    undocumented_alleles: Optional[List[UndocumentedAllele]] = Field(
        None,
        description='List of alleles inferred to be present and not documented in an identified GermlineSet',
    )
    deleted_genes: Optional[List[DeletedGene]] = Field(
        None, description='Array of genes identified as being deleted in this genotype'
    )
    inference_process: Optional[InferenceProcess] = Field(
        None,
        description='Information on how the genotype was acquired. Controlled vocabulary.',
        example='repertoire_sequencing',
        title='Genotype acquisition process',
    )


class Study(BaseModel):
    study_id: str = Field(
        ...,
        description='Unique ID assigned by study registry such as one of the International Nucleotide Sequence Database Collaboration (INSDC) repositories.\n',
        example='PRJNA001',
        title='Study ID',
    )
    study_title: str = Field(
        ...,
        description='Descriptive study title',
        example='Effects of sun light exposure of the Treg repertoire',
        title='Study title',
    )
    study_type: Ontology = Field(
        ...,
        description='Type of study design',
        example={'id': 'NCIT:C15197', 'label': 'Case-Control Study'},
        title='Study type',
    )
    study_description: Optional[str] = Field(
        None,
        description='Generic study description',
        example='Longer description',
        title='Study description',
    )
    inclusion_exclusion_criteria: str = Field(
        ...,
        description='List of criteria for inclusion/exclusion for the study',
        example='Include: Clinical P. falciparum infection; Exclude: Seropositive for HIV',
        title='Study inclusion/exclusion criteria',
    )
    grants: str = Field(
        ...,
        description='Funding agencies and grant numbers',
        example='NIH, award number R01GM987654',
        title='Grant funding agency',
    )
    study_contact: Optional[str] = Field(
        None,
        description='Full contact information of the contact persons for this study This should include an e-mail address and a persistent identifier such as an ORCID ID.\n',
        example='Dr. P. Stibbons, p.stibbons@unseenu.edu, https://orcid.org/0000-0002-1825-0097',
        title='Contact information (study)',
    )
    collected_by: str = Field(
        ...,
        description='Full contact information of the data collector, i.e. the person who is legally responsible for data collection and release. This should include an e-mail address and a persistent identifier such as an ORCID ID.\n',
        example='Dr. P. Stibbons, p.stibbons@unseenu.edu, https://orcid.org/0000-0002-1825-0097',
        title='Contact information (data collection)',
    )
    lab_name: str = Field(
        ...,
        description='Department of data collector',
        example='Department for Planar Immunology',
        title='Lab name',
    )
    lab_address: str = Field(
        ...,
        description='Institution and institutional address of data collector',
        example='School of Medicine, Unseen University, Ankh-Morpork, Disk World',
        title='Lab address',
    )
    submitted_by: str = Field(
        ...,
        description='Full contact information of the data depositor, i.e., the person submitting the data to a repository. This should include an e-mail address and a persistent identifier such as an ORCID ID. This is supposed to be a short-lived and technical role until the submission is relased.\n',
        example='Adrian Turnipseed, a.turnipseed@unseenu.edu, https://orcid.org/0000-0002-1825-0097',
        title='Contact information (data deposition)',
    )
    pub_ids: str = Field(
        ...,
        description='Publications describing the rationale and/or outcome of the study. Where ever possible, a persistent identifier should be used such as a DOI or a Pubmed ID\n',
        example='PMID:85642',
        title='Relevant publications',
    )
    keywords_study: List[KeywordsStudyEnum] = Field(
        ...,
        description='Keywords describing properties of one or more data sets in a study. "contains_schema" keywords indicate that the study contains data objects from the AIRR Schema of that type (Rearrangement, Clone, Cell, Receptor) while the other keywords indicate that the study design considers the type of data indicated (e.g. it is possible to have a study that "contains_paired_chain" but does not "contains_schema_cell").\n',
        example=[
            'contains_ig',
            'contains_schema_rearrangement',
            'contains_schema_clone',
            'contains_schema_cell',
        ],
        title='Keywords for study',
    )
    adc_publish_date: Optional[datetime] = Field(
        None,
        description='Date the study was first published in the AIRR Data Commons.\n',
        example='2021-02-02',
        title='ADC Publish Date',
    )
    adc_update_date: Optional[datetime] = Field(
        None,
        description='Date the study data was updated in the AIRR Data Commons.\n',
        example='2021-02-02',
        title='ADC Update Date',
    )


class CellProcessing(BaseModel):
    tissue_processing: str = Field(
        ...,
        description='Enzymatic digestion and/or physical methods used to isolate cells from sample',
        example='Collagenase A/Dnase I digested, followed by Percoll gradient',
        title='Tissue processing',
    )
    cell_subset: Ontology = Field(
        ...,
        description='Commonly-used designation of isolated cell population',
        example={'id': 'CL:0000972', 'label': 'class switched memory B cell'},
        title='Cell subset',
    )
    cell_phenotype: str = Field(
        ...,
        description='List of cellular markers and their expression levels used to isolate the cell population',
        example='CD19+ CD38+ CD27+ IgM- IgD-',
        title='Cell subset phenotype',
    )
    cell_species: Optional[Ontology] = Field(
        None,
        description='Binomial designation of the species from which the analyzed cells originate. Typically, this value should be identical to `species`, in which case it SHOULD NOT be set explicitly. However, there are valid experimental setups in which the two might differ, e.g., chimeric animal models. If set, this key will overwrite the `species` information for all lower layers of the schema.\n',
        example={'id': 'NCBITAXON:9606', 'label': 'Homo sapiens'},
        title='Cell species',
    )
    single_cell: bool = Field(
        ...,
        description='TRUE if single cells were isolated into separate compartments',
        title='Single-cell sort',
    )
    cell_number: int = Field(
        ...,
        description='Total number of cells that went into the experiment',
        example=1000000,
        title='Number of cells in experiment',
    )
    cells_per_reaction: int = Field(
        ...,
        description='Number of cells for each biological replicate',
        example=50000,
        title='Number of cells per sequencing reaction',
    )
    cell_storage: bool = Field(
        ...,
        description='TRUE if cells were cryo-preserved between isolation and further processing',
        example=True,
        title='Cell storage',
    )
    cell_quality: str = Field(
        ...,
        description='Relative amount of viable cells after preparation and (if applicable) thawing',
        example='90% viability as determined by 7-AAD',
        title='Cell quality',
    )
    cell_isolation: str = Field(
        ...,
        description='Description of the procedure used for marker-based isolation or enrich cells',
        example='Cells were stained with fluorochrome labeled antibodies and then sorted on a FlowMerlin (CE) cytometer.\n',
        title='Cell isolation / enrichment procedure',
    )
    cell_processing_protocol: str = Field(
        ...,
        description='Description of the methods applied to the sample including cell preparation/ isolation/enrichment and nucleic acid extraction. This should closely mirror the Materials and methods section in the manuscript.\n',
        example='Stimulated wih anti-CD3/anti-CD28',
        title='Processing protocol',
    )


class Diagnosis(BaseModel):
    study_group_description: str = Field(
        ...,
        description='Designation of study arm to which the subject is assigned to',
        example='control',
        title='Study group description',
    )
    disease_diagnosis: Ontology = Field(
        ...,
        description='Diagnosis of subject',
        example={'id': 'DOID:9538', 'label': 'multiple myeloma'},
        title='Diagnosis',
    )
    disease_length: str = Field(
        ...,
        description='Time duration between initial diagnosis and current intervention',
        example='23 months',
        title='Length of disease',
    )
    disease_stage: str = Field(
        ...,
        description='Stage of disease at current intervention',
        example='Stage II',
        title='Disease stage',
    )
    prior_therapies: str = Field(
        ...,
        description='List of all relevant previous therapies applied to subject for treatment of `Diagnosis`',
        example='melphalan/prednisone',
        title='Prior therapies for primary disease under study',
    )
    immunogen: str = Field(
        ...,
        description='Antigen, vaccine or drug applied to subject at this intervention',
        example='bortezomib',
        title='Immunogen/agent',
    )
    intervention: str = Field(
        ...,
        description='Description of intervention',
        example='systemic chemotherapy, 6 cycles, 1.25 mg/m2',
        title='Intervention definition',
    )
    medical_history: str = Field(
        ...,
        description='Medical history of subject that is relevant to assess the course of disease and/or treatment',
        example='MGUS, first diagnosed 5 years prior',
        title='Other relevant medical history',
    )


class NucleicAcidProcessing(BaseModel):
    template_class: TemplateClass = Field(
        ...,
        description='The class of nucleic acid that was used as primary starting material for the following procedures\n',
        example='RNA',
        title='Target substrate',
    )
    template_quality: str = Field(
        ...,
        description='Description and results of the quality control performed on the template material',
        example='RIN 9.2',
        title='Target substrate quality',
    )
    template_amount: float = Field(
        ...,
        description='Amount of template that went into the process',
        example=1000,
        title='Template amount',
    )
    template_amount_unit: Ontology = Field(
        ...,
        description='Unit of template amount',
        example={'id': 'UO:0000024', 'label': 'nanogram'},
        title='Template amount time unit',
    )
    library_generation_method: LibraryGenerationMethod = Field(
        ...,
        description='Generic type of library generation',
        example='RT(oligo-dT)+TS(UMI)+PCR',
        title='Library generation method',
    )
    library_generation_protocol: str = Field(
        ...,
        description='Description of processes applied to substrate to obtain a library that is ready for sequencing',
        example='cDNA was generated using',
        title='Library generation protocol',
    )
    library_generation_kit_version: str = Field(
        ...,
        description='When using a library generation protocol from a commercial provider, provide the protocol version number',
        example='v2.1 (2016-09-15)',
        title='Protocol IDs',
    )
    pcr_target: Optional[List[PCRTarget]] = Field(
        None,
        description='If a PCR step was performed that specifically targets the IG/TR loci, the target and primer locations need to be provided here. This field holds an array of PCRTarget objects, so that multiplex PCR setups amplifying multiple loci at the same time can be annotated using one record per locus. PCR setups not targeting any specific locus must not annotate this field but select the appropriate library_generation_method instead.\n',
    )
    complete_sequences: CompleteSequences = Field(
        ...,
        description="To be considered `complete`, the procedure used for library construction MUST generate sequences that 1) include the first V gene codon that encodes the mature polypeptide chain (i.e. after the leader sequence) and 2) include the last complete codon of the J gene (i.e. 1 bp 5' of the J->C splice site) and 3) provide sequence information for all positions between 1) and 2). To be considered `complete & untemplated`, the sections of the sequences defined in points 1) to 3) of the previous sentence MUST be untemplated, i.e. MUST NOT overlap with the primers used in library preparation. `mixed` should only be used if the procedure used for library construction will likely produce multiple categories of sequences in the given experiment. It SHOULD NOT be used as a replacement of a NULL value.\n",
        example='partial',
        title='Complete sequences',
    )
    physical_linkage: PhysicalLinkage = Field(
        ...,
        description="In case an experimental setup is used that physically links nucleic acids derived from distinct `Rearrangements` before library preparation, this field describes the mode of that linkage. All `hetero_*` terms indicate that in case of paired-read sequencing, the two reads should be expected to map to distinct IG/TR loci. `*_head-head` refers to techniques that link the 5' ends of transcripts in a single-cell context. `*_tail-head` refers to techniques that link the 3' end of one transcript to the 5' end of another one in a single-cell context. This term does not provide any information whether a continuous reading-frame between the two is generated. `*_prelinked` refers to constructs in which the linkage was already present on the DNA level (e.g. scFv).\n",
        example='hetero_head-head',
        title='Physical linkage of different rearrangements',
    )


class SequencingRun(BaseModel):
    sequencing_run_id: str = Field(
        ...,
        description='ID of sequencing run assigned by the sequencing facility',
        example='160101_M01234',
        title='Batch number',
    )
    total_reads_passing_qc_filter: int = Field(
        ...,
        description='Number of usable reads for analysis',
        example=10365118,
        title='Total reads passing QC filter',
    )
    sequencing_platform: str = Field(
        ...,
        description='Designation of sequencing instrument used',
        example='Alumina LoSeq 1000',
        title='Sequencing platform',
    )
    sequencing_facility: str = Field(
        ...,
        description='Name and address of sequencing facility',
        example='Seqs-R-Us, Vancouver, BC, Canada',
        title='Sequencing facility',
    )
    sequencing_run_date: Optional[date] = Field(
        ...,
        description='Date of sequencing run',
        example='2016-12-16',
        title='Date of sequencing run',
    )
    sequencing_kit: str = Field(
        ...,
        description='Name, manufacturer, order and lot numbers of sequencing kit',
        example='FullSeq 600, Alumina, #M123456C0, 789G1HK',
        title='Sequencing kit',
    )
    sequencing_files: Optional[SequencingData] = Field(
        None, description='Set of sequencing files produced by the sequencing run'
    )


class GenotypeModel(BaseModel):
    receptor_genotype_id: str = Field(
        ...,
        description='A unique identifier within the file for this Receptor Genotype, typically generated by the  repository hosting the schema, for example from the underlying ID of the database record.\n',
    )
    locus: Locus = Field(..., description='Gene locus', example='IGH')
    documented_alleles: Optional[List[DocumentedAllele]] = Field(
        None, description='List of alleles documented in reference set(s)'
    )
    undocumented_alleles: Optional[List[UndocumentedAllele]] = Field(
        None,
        description='List of alleles inferred to be present and not documented in an identified GermlineSet',
    )
    deleted_genes: Optional[List[DeletedGene]] = Field(
        None, description='Array of genes identified as being deleted in this genotype'
    )
    inference_process: Optional[InferenceProcess1] = Field(
        None,
        description='Information on how the genotype was acquired. Controlled vocabulary.',
        example='repertoire_sequencing',
        title='Genotype acquisition process',
    )


class MHCGenotype(BaseModel):
    mhc_genotype_id: str = Field(
        ...,
        description='A unique identifier for this MHCGenotype, assumed to be unique in the context of the study',
    )
    mhc_class: MhcClass = Field(
        ...,
        description='Class of MHC alleles described by the MHCGenotype',
        example='MHC-I',
    )
    mhc_alleles: List[MHCAllele] = Field(
        ...,
        description='List of MHC alleles of the indicated mhc_class identified in an individual',
    )
    mhc_genotyping_method: Optional[str] = Field(
        None,
        description='Information on how the genotype was determined. The content of this field should come from a list of recommended terms provided in the AIRR Schema documentation.\n',
        example='pcr_low_resolution',
        title='MHC genotyping method',
    )


class SampleGenotypeResponse(BaseModel):
    Repertoire: Optional[Genotype] = None


class SampleProcessing(Sample, CellProcessing, NucleicAcidProcessing, SequencingRun):
    sample_processing_id: Optional[str] = Field(
        None,
        description='Identifier for the sample processing object. This field should be unique within the repertoire. This field can be used to uniquely identify the combination of sample, cell processing, nucleic acid processing and sequencing run information for the repertoire.\n',
        title='Sample processing ID',
    )


class GenotypeSet(BaseModel):
    receptor_genotype_set_id: str = Field(
        ...,
        description='A unique identifier for this Receptor Genotype Set, typically generated by the repository  hosting the schema, for example from the underlying ID of the database record.\n',
    )
    genotype_class_list: Optional[List[GenotypeModel]] = Field(
        None, description='List of Genotypes included in this Receptor Genotype Set.'
    )


class MHCGenotypeSet(BaseModel):
    mhc_genotype_set_id: str = Field(
        ..., description='A unique identifier for this MHCGenotypeSet'
    )
    mhc_genotype_list: List[MHCGenotype] = Field(
        ..., description='List of MHCGenotypes included in this set'
    )


class SubjectGenotype(BaseModel):
    receptor_genotype_set: Optional[GenotypeSet] = Field(
        None, description='Immune receptor genotype set for this subject.'
    )
    mhc_genotype_set: Optional[MHCGenotypeSet] = Field(
        None, description='MHC genotype set for this subject.'
    )


class Subject(BaseModel):
    subject_id: str = Field(
        ...,
        description='Subject ID assigned by submitter, unique within study. If possible, a persistent subject ID linked to an INSDC or similar repository study should be used.\n',
        example='SUB856413',
        title='Subject ID',
    )
    synthetic: bool = Field(
        ...,
        description='TRUE for libraries in which the diversity has been synthetically generated (e.g. phage display)',
        title='Synthetic library',
    )
    species: Ontology = Field(
        ...,
        description="Binomial designation of subject's species",
        example={'id': 'NCBITAXON:9606', 'label': 'Homo sapiens'},
        title='Organism',
    )
    organism: Optional[Ontology] = Field(
        None, description="Binomial designation of subject's species"
    )
    sex: Sex = Field(
        ..., description='Biological sex of subject', example='female', title='Sex'
    )
    age_min: float = Field(
        ...,
        description='Specific age or lower boundary of age range.',
        example=60,
        title='Age minimum',
    )
    age_max: float = Field(
        ...,
        description='Upper boundary of age range or equal to age_min for specific age. This field should only be null if age_min is null.\n',
        example=80,
        title='Age maximum',
    )
    age_unit: Ontology = Field(
        ...,
        description='Unit of age range',
        example={'id': 'UO:0000036', 'label': 'year'},
        title='Age unit',
    )
    age_event: str = Field(
        ...,
        description='Event in the study schedule to which `Age` refers. For NCBI BioSample this MUST be `sampling`. For other implementations submitters need to be aware that there is currently no mechanism to encode to potential delta between `Age event` and `Sample collection time`, hence the chosen events should be in temporal proximity.\n',
        example='enrollment',
        title='Age event',
    )
    age: Optional[str] = None
    ancestry_population: str = Field(
        ...,
        description='Broad geographic origin of ancestry (continent)',
        example='list of continents, mixed or unknown',
        title='Ancestry population',
    )
    ethnicity: str = Field(
        ...,
        description='Ethnic group of subject (defined as cultural/language-based membership)',
        example='English, Kurds, Manchu, Yakuts (and other fields from Wikipedia)',
        title='Ethnicity',
    )
    race: str = Field(
        ...,
        description='Racial group of subject (as defined by NIH)',
        example='White, American Indian or Alaska Native, Black, Asian, Native Hawaiian or Other Pacific Islander, Other',
        title='Race',
    )
    strain_name: str = Field(
        ...,
        description='Non-human designation of the strain or breed of animal used',
        example='C57BL/6J',
        title='Strain name',
    )
    linked_subjects: str = Field(
        ...,
        description='Subject ID to which `Relation type` refers',
        example='SUB1355648',
        title='Relation to other subjects',
    )
    link_type: str = Field(
        ...,
        description='Relation between subject and `linked_subjects`, can be genetic or environmental (e.g.exposure)',
        example='father, daughter, household',
        title='Relation type',
    )
    diagnosis: Optional[List[Diagnosis]] = Field(
        None, description='Diagnosis information for subject'
    )
    genotype: Optional[SubjectGenotype] = Field(None, title='SubjectGenotype')


class Repertoire(BaseModel):
    repertoire_id: Optional[str] = Field(
        None,
        description='Identifier for the repertoire object. This identifier should be globally unique so that repertoires from multiple studies can be combined together without conflict. The repertoire_id is used to link other AIRR data to a Repertoire. Specifically, the Rearrangements Schema includes repertoire_id for referencing the specific Repertoire for that Rearrangement.\n',
        title='Repertoire ID',
    )
    repertoire_name: Optional[str] = Field(
        None,
        description='Short generic display name for the repertoire',
        title='Repertoire name',
    )
    repertoire_description: Optional[str] = Field(
        None,
        description='Generic repertoire description',
        title='Repertoire description',
    )
    study: Study = Field(..., description='Study object')
    subject: Subject = Field(..., description='Subject object')
    sample: List[SampleProcessing] = Field(
        ..., description='List of Sample Processing objects'
    )
    data_processing: List[DataProcessing] = Field(
        ..., description='List of Data Processing objects'
    )


class SampleMetadataResponse(BaseModel):
    Repertoire: Optional[Repertoire] = None
